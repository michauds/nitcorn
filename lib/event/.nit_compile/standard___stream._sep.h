/* This C header file is generated by NIT to compile modules and programs that requires /home/jp/Projects-ssd/nit//lib/standard/stream. */
#ifndef standard___stream_sep
#define standard___stream_sep
#include "standard___string._sep.h"
#include <nit_common.h>
#include "stream._nitni.h"

extern const classtable_elt_t VFT_standard___stream___IOS[];

extern const classtable_elt_t VFT_standard___stream___IStream[];

extern const classtable_elt_t VFT_standard___stream___OStream[];

extern const classtable_elt_t VFT_standard___stream___BufferedIStream[];

extern const classtable_elt_t VFT_standard___stream___IOStream[];

extern const classtable_elt_t VFT_standard___stream___FDStream[];

extern const classtable_elt_t VFT_standard___stream___FDIStream[];

extern const classtable_elt_t VFT_standard___stream___FDOStream[];

extern const classtable_elt_t VFT_standard___stream___FDIOStream[];
extern const char LOCATE_standard___stream[];
extern const int SFT_standard___stream[];
#define ID_standard___stream___IOS (SFT_standard___stream[0])
#define COLOR_standard___stream___IOS (SFT_standard___stream[1])
#define INIT_TABLE_POS_standard___stream___IOS (SFT_standard___stream[2] + 0)
#define CALL_standard___stream___IOS___close(recv) ((standard___stream___IOS___close_t)CALL((recv), (SFT_standard___stream[2] + 1)))
#define ID_standard___stream___IStream (SFT_standard___stream[3])
#define COLOR_standard___stream___IStream (SFT_standard___stream[4])
#define INIT_TABLE_POS_standard___stream___IStream (SFT_standard___stream[5] + 0)
#define CALL_standard___stream___IStream___read_char(recv) ((standard___stream___IStream___read_char_t)CALL((recv), (SFT_standard___stream[5] + 1)))
#define CALL_standard___stream___IStream___read(recv) ((standard___stream___IStream___read_t)CALL((recv), (SFT_standard___stream[5] + 2)))
#define CALL_standard___stream___IStream___read_line(recv) ((standard___stream___IStream___read_line_t)CALL((recv), (SFT_standard___stream[5] + 3)))
#define CALL_standard___stream___IStream___read_all(recv) ((standard___stream___IStream___read_all_t)CALL((recv), (SFT_standard___stream[5] + 4)))
#define CALL_standard___stream___IStream___append_line_to(recv) ((standard___stream___IStream___append_line_to_t)CALL((recv), (SFT_standard___stream[5] + 5)))
#define CALL_standard___stream___IStream___eof(recv) ((standard___stream___IStream___eof_t)CALL((recv), (SFT_standard___stream[5] + 6)))
#define ID_standard___stream___OStream (SFT_standard___stream[6])
#define COLOR_standard___stream___OStream (SFT_standard___stream[7])
#define INIT_TABLE_POS_standard___stream___OStream (SFT_standard___stream[8] + 0)
#define CALL_standard___stream___OStream___write(recv) ((standard___stream___OStream___write_t)CALL((recv), (SFT_standard___stream[8] + 1)))
#define CALL_standard___stream___OStream___is_writable(recv) ((standard___stream___OStream___is_writable_t)CALL((recv), (SFT_standard___stream[8] + 2)))
#define ID_standard___stream___BufferedIStream (SFT_standard___stream[9])
#define COLOR_standard___stream___BufferedIStream (SFT_standard___stream[10])
#define ATTR_standard___stream___BufferedIStream____buffer(recv) ATTR(recv, (SFT_standard___stream[11] + 0))
#define ATTR_standard___stream___BufferedIStream____buffer_pos(recv) ATTR(recv, (SFT_standard___stream[11] + 1))
#define INIT_TABLE_POS_standard___stream___BufferedIStream (SFT_standard___stream[12] + 0)
#define CALL_standard___stream___BufferedIStream___fill_buffer(recv) ((standard___stream___BufferedIStream___fill_buffer_t)CALL((recv), (SFT_standard___stream[12] + 1)))
#define CALL_standard___stream___BufferedIStream___end_reached(recv) ((standard___stream___BufferedIStream___end_reached_t)CALL((recv), (SFT_standard___stream[12] + 2)))
#define CALL_standard___stream___BufferedIStream___prepare_buffer(recv) ((standard___stream___BufferedIStream___prepare_buffer_t)CALL((recv), (SFT_standard___stream[12] + 3)))
#define CALL_standard___stream___BufferedIStream___init(recv) ((standard___stream___BufferedIStream___init_t)CALL((recv), (SFT_standard___stream[12] + 4)))
#define ID_standard___stream___IOStream (SFT_standard___stream[13])
#define COLOR_standard___stream___IOStream (SFT_standard___stream[14])
#define INIT_TABLE_POS_standard___stream___IOStream (SFT_standard___stream[15] + 0)
#define ID_standard___stream___FDStream (SFT_standard___stream[16])
#define COLOR_standard___stream___FDStream (SFT_standard___stream[17])
#define ATTR_standard___stream___FDStream_____atfd(recv) ATTR(recv, (SFT_standard___stream[18] + 0))
#define INIT_TABLE_POS_standard___stream___FDStream (SFT_standard___stream[19] + 0)
#define CALL_standard___stream___FDStream___fd(recv) ((standard___stream___FDStream___fd_t)CALL((recv), (SFT_standard___stream[19] + 1)))
#define CALL_standard___stream___FDStream___fd__eq(recv) ((standard___stream___FDStream___fd__eq_t)CALL((recv), (SFT_standard___stream[19] + 2)))
#define CALL_standard___stream___FDStream___native_close(recv) ((standard___stream___FDStream___native_close_t)CALL((recv), (SFT_standard___stream[19] + 3)))
#define CALL_standard___stream___FDStream___native_read_char(recv) ((standard___stream___FDStream___native_read_char_t)CALL((recv), (SFT_standard___stream[19] + 4)))
#define CALL_standard___stream___FDStream___native_read(recv) ((standard___stream___FDStream___native_read_t)CALL((recv), (SFT_standard___stream[19] + 5)))
#define CALL_standard___stream___FDStream___native_write(recv) ((standard___stream___FDStream___native_write_t)CALL((recv), (SFT_standard___stream[19] + 6)))
#define CALL_standard___stream___FDStream___init(recv) ((standard___stream___FDStream___init_t)CALL((recv), (SFT_standard___stream[19] + 7)))
#define ID_standard___stream___FDIStream (SFT_standard___stream[20])
#define COLOR_standard___stream___FDIStream (SFT_standard___stream[21])
#define ATTR_standard___stream___FDIStream_____ateof(recv) ATTR(recv, (SFT_standard___stream[22] + 0))
#define INIT_TABLE_POS_standard___stream___FDIStream (SFT_standard___stream[23] + 0)
#define CALL_standard___stream___FDIStream___eof__eq(recv) ((standard___stream___FDIStream___eof__eq_t)CALL((recv), (SFT_standard___stream[23] + 1)))
#define CALL_standard___stream___FDIStream___init(recv) ((standard___stream___FDIStream___init_t)CALL((recv), (SFT_standard___stream[23] + 2)))
#define ID_standard___stream___FDOStream (SFT_standard___stream[24])
#define COLOR_standard___stream___FDOStream (SFT_standard___stream[25])
#define ATTR_standard___stream___FDOStream_____atis_writable(recv) ATTR(recv, (SFT_standard___stream[26] + 0))
#define INIT_TABLE_POS_standard___stream___FDOStream (SFT_standard___stream[27] + 0)
#define CALL_standard___stream___FDOStream___is_writable__eq(recv) ((standard___stream___FDOStream___is_writable__eq_t)CALL((recv), (SFT_standard___stream[27] + 1)))
#define CALL_standard___stream___FDOStream___init(recv) ((standard___stream___FDOStream___init_t)CALL((recv), (SFT_standard___stream[27] + 2)))
#define ID_standard___stream___FDIOStream (SFT_standard___stream[28])
#define COLOR_standard___stream___FDIOStream (SFT_standard___stream[29])
#define INIT_TABLE_POS_standard___stream___FDIOStream (SFT_standard___stream[30] + 0)
#define CALL_standard___stream___FDIOStream___init(recv) ((standard___stream___FDIOStream___init_t)CALL((recv), (SFT_standard___stream[30] + 1)))
#define CALL_standard___stream___Object___poll(recv) ((standard___stream___Object___poll_t)CALL((recv), (SFT_standard___stream[31] + 0)))
#define CALL_standard___stream___Object___intern_poll(recv) ((standard___stream___Object___intern_poll_t)CALL((recv), (SFT_standard___stream[31] + 1)))
void standard___stream___IOS___close(val_t p0);
typedef void (*standard___stream___IOS___close_t)(val_t p0);
val_t standard___stream___IStream___read_char(val_t p0);
typedef val_t (*standard___stream___IStream___read_char_t)(val_t p0);
val_t standard___stream___IStream___read(val_t p0, val_t p1);
typedef val_t (*standard___stream___IStream___read_t)(val_t p0, val_t p1);
val_t standard___stream___IStream___read_line(val_t p0);
typedef val_t (*standard___stream___IStream___read_line_t)(val_t p0);
val_t standard___stream___IStream___read_all(val_t p0);
typedef val_t (*standard___stream___IStream___read_all_t)(val_t p0);
void standard___stream___IStream___append_line_to(val_t p0, val_t p1);
typedef void (*standard___stream___IStream___append_line_to_t)(val_t p0, val_t p1);
val_t standard___stream___IStream___eof(val_t p0);
typedef val_t (*standard___stream___IStream___eof_t)(val_t p0);
void standard___stream___OStream___write(val_t p0, val_t p1);
typedef void (*standard___stream___OStream___write_t)(val_t p0, val_t p1);
val_t standard___stream___OStream___is_writable(val_t p0);
typedef val_t (*standard___stream___OStream___is_writable_t)(val_t p0);
val_t standard___stream___BufferedIStream___read_char(val_t p0);
typedef val_t (*standard___stream___BufferedIStream___read_char_t)(val_t p0);
val_t standard___stream___BufferedIStream___read(val_t p0, val_t p1);
typedef val_t (*standard___stream___BufferedIStream___read_t)(val_t p0, val_t p1);
val_t standard___stream___BufferedIStream___read_all(val_t p0);
typedef val_t (*standard___stream___BufferedIStream___read_all_t)(val_t p0);
void standard___stream___BufferedIStream___append_line_to(val_t p0, val_t p1);
typedef void (*standard___stream___BufferedIStream___append_line_to_t)(val_t p0, val_t p1);
val_t standard___stream___BufferedIStream___eof(val_t p0);
typedef val_t (*standard___stream___BufferedIStream___eof_t)(val_t p0);
void standard___stream___BufferedIStream___fill_buffer(val_t p0);
typedef void (*standard___stream___BufferedIStream___fill_buffer_t)(val_t p0);
val_t standard___stream___BufferedIStream___end_reached(val_t p0);
typedef val_t (*standard___stream___BufferedIStream___end_reached_t)(val_t p0);
void standard___stream___BufferedIStream___prepare_buffer(val_t p0, val_t p1);
typedef void (*standard___stream___BufferedIStream___prepare_buffer_t)(val_t p0, val_t p1);
void standard___stream___BufferedIStream___init(val_t p0, int* init_table);
typedef void (*standard___stream___BufferedIStream___init_t)(val_t p0, int* init_table);
val_t NEW_BufferedIStream_standard___stream___BufferedIStream___init();
val_t standard___stream___FDStream___fd(val_t p0);
typedef val_t (*standard___stream___FDStream___fd_t)(val_t p0);
void standard___stream___FDStream___fd__eq(val_t p0, val_t p1);
typedef void (*standard___stream___FDStream___fd__eq_t)(val_t p0, val_t p1);
void standard___stream___FDStream___close(val_t p0);
typedef void (*standard___stream___FDStream___close_t)(val_t p0);
val_t standard___stream___FDStream___native_close(val_t p0, val_t p1);
typedef val_t (*standard___stream___FDStream___native_close_t)(val_t p0, val_t p1);
val_t standard___stream___FDStream___native_read_char(val_t p0, val_t p1);
typedef val_t (*standard___stream___FDStream___native_read_char_t)(val_t p0, val_t p1);
val_t standard___stream___FDStream___native_read(val_t p0, val_t p1, val_t p2, val_t p3);
typedef val_t (*standard___stream___FDStream___native_read_t)(val_t p0, val_t p1, val_t p2, val_t p3);
val_t standard___stream___FDStream___native_write(val_t p0, val_t p1, val_t p2, val_t p3);
typedef val_t (*standard___stream___FDStream___native_write_t)(val_t p0, val_t p1, val_t p2, val_t p3);
void standard___stream___FDStream___init(val_t p0, val_t p1, int* init_table);
typedef void (*standard___stream___FDStream___init_t)(val_t p0, val_t p1, int* init_table);
val_t NEW_FDStream_standard___stream___FDStream___init(val_t p0);
val_t standard___stream___FDIStream___eof(val_t p0);
typedef val_t (*standard___stream___FDIStream___eof_t)(val_t p0);
void standard___stream___FDIStream___eof__eq(val_t p0, val_t p1);
typedef void (*standard___stream___FDIStream___eof__eq_t)(val_t p0, val_t p1);
val_t standard___stream___FDIStream___read_char(val_t p0);
typedef val_t (*standard___stream___FDIStream___read_char_t)(val_t p0);
void standard___stream___FDIStream___init(val_t p0, val_t p1, int* init_table);
typedef void (*standard___stream___FDIStream___init_t)(val_t p0, val_t p1, int* init_table);
val_t NEW_FDIStream_standard___stream___FDIStream___init(val_t p0);
val_t standard___stream___FDOStream___is_writable(val_t p0);
typedef val_t (*standard___stream___FDOStream___is_writable_t)(val_t p0);
void standard___stream___FDOStream___is_writable__eq(val_t p0, val_t p1);
typedef void (*standard___stream___FDOStream___is_writable__eq_t)(val_t p0, val_t p1);
void standard___stream___FDOStream___write(val_t p0, val_t p1);
typedef void (*standard___stream___FDOStream___write_t)(val_t p0, val_t p1);
void standard___stream___FDOStream___init(val_t p0, val_t p1, int* init_table);
typedef void (*standard___stream___FDOStream___init_t)(val_t p0, val_t p1, int* init_table);
val_t NEW_FDOStream_standard___stream___FDOStream___init(val_t p0);
void standard___stream___FDIOStream___init(val_t p0, val_t p1, int* init_table);
typedef void (*standard___stream___FDIOStream___init_t)(val_t p0, val_t p1, int* init_table);
val_t NEW_FDIOStream_standard___stream___FDIOStream___init(val_t p0);
val_t standard___stream___Object___poll(val_t p0, val_t p1);
typedef val_t (*standard___stream___Object___poll_t)(val_t p0, val_t p1);
  typedef void (*CLOS_OC_standard___stream___Object___poll_1_0)(struct stack_frame_t *);
  void OC_standard___stream___Object___poll_1(struct stack_frame_t *closctx, val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
  typedef void (*OC_standard___stream___Object___poll_1_t)(struct stack_frame_t *closctx, val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
val_t standard___stream___Object___intern_poll(val_t p0, val_t p1, val_t p2);
typedef val_t (*standard___stream___Object___intern_poll_t)(val_t p0, val_t p1, val_t p2);
#endif
