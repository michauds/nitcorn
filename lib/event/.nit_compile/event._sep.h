/* This C header file is generated by NIT to compile modules and programs that requires ./event. */
#ifndef event_sep
#define event_sep
#include "standard._sep.h"
#include <nit_common.h>
#include "event._nitni.h"
#include "event._ffi.h"

extern const classtable_elt_t VFT_event___EventBase[];
struct TBOX_EventBase { const classtable_elt_t * vft; bigint object_id; void* val;};
val_t BOX_EventBase(void* val);
#define UNBOX_EventBase(x) (((struct TBOX_EventBase *)(VAL2OBJ(x)))->val)

extern const classtable_elt_t VFT_event___Callback[];

extern const classtable_elt_t VFT_event___ConnectionListener[];
struct TBOX_ConnectionListener { const classtable_elt_t * vft; bigint object_id; void* val;};
val_t BOX_ConnectionListener(void* val);
#define UNBOX_ConnectionListener(x) (((struct TBOX_ConnectionListener *)(VAL2OBJ(x)))->val)
extern const char LOCATE_event[];
extern const int SFT_event[];
#define ID_event___EventBase (SFT_event[0])
#define COLOR_event___EventBase (SFT_event[1])
#define INIT_TABLE_POS_event___EventBase (SFT_event[2] + 0)
#define CALL_event___EventBase___create_base(recv) ((event___EventBase___create_base_t)CALL((recv), (SFT_event[2] + 1)))
#define CALL_event___EventBase___dispatch(recv) ((event___EventBase___dispatch_t)CALL((recv), (SFT_event[2] + 2)))
#define ID_event___Callback (SFT_event[3])
#define COLOR_event___Callback (SFT_event[4])
#define INIT_TABLE_POS_event___Callback (SFT_event[5] + 0)
#define CALL_event___Callback___accept_callback(recv) ((event___Callback___accept_callback_t)CALL((recv), (SFT_event[5] + 1)))
#define CALL_event___Callback___error_callback(recv) ((event___Callback___error_callback_t)CALL((recv), (SFT_event[5] + 2)))
#define ID_event___ConnectionListener (SFT_event[6])
#define COLOR_event___ConnectionListener (SFT_event[7])
#define INIT_TABLE_POS_event___ConnectionListener (SFT_event[8] + 0)
#define CALL_event___ConnectionListener___bind_to(recv) ((event___ConnectionListener___bind_to_t)CALL((recv), (SFT_event[8] + 1)))
#define CALL_event___ConnectionListener___base(recv) ((event___ConnectionListener___base_t)CALL((recv), (SFT_event[8] + 2)))
#define CALL_event___ConnectionListener___read_callback(recv) ((event___ConnectionListener___read_callback_t)CALL((recv), (SFT_event[8] + 3)))
#define CALL_event___ConnectionListener___exit_loop(recv) ((event___ConnectionListener___exit_loop_t)CALL((recv), (SFT_event[8] + 4)))
void event___EventBase___create_base(val_t p0, int* init_table);
typedef void (*event___EventBase___create_base_t)(val_t p0, int* init_table);
val_t NEW_EventBase_event___EventBase___create_base();
void event___EventBase___dispatch(val_t p0);
typedef void (*event___EventBase___dispatch_t)(val_t p0);
void event___Callback___accept_callback(val_t p0);
typedef void (*event___Callback___accept_callback_t)(val_t p0);
void event___Callback___error_callback(val_t p0);
typedef void (*event___Callback___error_callback_t)(val_t p0);
void event___ConnectionListener___bind_to(val_t p0, val_t p1, val_t p2, val_t p3, int* init_table);
typedef void (*event___ConnectionListener___bind_to_t)(val_t p0, val_t p1, val_t p2, val_t p3, int* init_table);
val_t NEW_ConnectionListener_event___ConnectionListener___bind_to(val_t p0, val_t p1, val_t p2);
val_t event___ConnectionListener___base(val_t p0);
typedef val_t (*event___ConnectionListener___base_t)(val_t p0);
void event___ConnectionListener___read_callback(val_t p0);
typedef void (*event___ConnectionListener___read_callback_t)(val_t p0);
void event___ConnectionListener___error_callback(val_t p0);
typedef void (*event___ConnectionListener___error_callback_t)(val_t p0);
void event___ConnectionListener___exit_loop(val_t p0);
typedef void (*event___ConnectionListener___exit_loop_t)(val_t p0);
void event___Sys___main(val_t p0);
typedef void (*event___Sys___main_t)(val_t p0);
val_t NEW_Sys_standard___kernel___Sys___init();
#endif
