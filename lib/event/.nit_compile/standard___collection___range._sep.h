/* This C header file is generated by NIT to compile modules and programs that requires /home/jp/Projects-ssd/nit//lib/standard/collection/range. */
#ifndef standard___collection___range_sep
#define standard___collection___range_sep
#include "standard___collection___abstract_collection._sep.h"
#include <nit_common.h>

extern const classtable_elt_t VFT_standard___collection___range___Range[];

extern const classtable_elt_t VFT_standard___collection___range___IteratorRange[];
extern const char LOCATE_standard___collection___range[];
extern const int SFT_standard___collection___range[];
#define ID_standard___collection___range___Range (SFT_standard___collection___range[0])
#define COLOR_standard___collection___range___Range (SFT_standard___collection___range[1])
#define ATTR_standard___collection___range___Range____first(recv) ATTR(recv, (SFT_standard___collection___range[2] + 0))
#define ATTR_standard___collection___range___Range____last(recv) ATTR(recv, (SFT_standard___collection___range[2] + 1))
#define ATTR_standard___collection___range___Range____after(recv) ATTR(recv, (SFT_standard___collection___range[2] + 2))
#define INIT_TABLE_POS_standard___collection___range___Range (SFT_standard___collection___range[3] + 0)
#define CALL_standard___collection___range___Range___last(recv) ((standard___collection___range___Range___last_t)CALL((recv), (SFT_standard___collection___range[3] + 1)))
#define CALL_standard___collection___range___Range___after(recv) ((standard___collection___range___Range___after_t)CALL((recv), (SFT_standard___collection___range[3] + 2)))
#define CALL_standard___collection___range___Range___init(recv) ((standard___collection___range___Range___init_t)CALL((recv), (SFT_standard___collection___range[3] + 3)))
#define CALL_standard___collection___range___Range___without_last(recv) ((standard___collection___range___Range___without_last_t)CALL((recv), (SFT_standard___collection___range[3] + 4)))
#define ID_standard___collection___range___IteratorRange (SFT_standard___collection___range[4])
#define COLOR_standard___collection___range___IteratorRange (SFT_standard___collection___range[5])
#define ATTR_standard___collection___range___IteratorRange____range(recv) ATTR(recv, (SFT_standard___collection___range[6] + 0))
#define ATTR_standard___collection___range___IteratorRange____item(recv) ATTR(recv, (SFT_standard___collection___range[6] + 1))
#define INIT_TABLE_POS_standard___collection___range___IteratorRange (SFT_standard___collection___range[7] + 0)
#define CALL_standard___collection___range___IteratorRange___init(recv) ((standard___collection___range___IteratorRange___init_t)CALL((recv), (SFT_standard___collection___range[7] + 1)))
val_t standard___collection___range___Range___first(val_t p0);
typedef val_t (*standard___collection___range___Range___first_t)(val_t p0);
val_t standard___collection___range___Range___last(val_t p0);
typedef val_t (*standard___collection___range___Range___last_t)(val_t p0);
val_t standard___collection___range___Range___after(val_t p0);
typedef val_t (*standard___collection___range___Range___after_t)(val_t p0);
val_t standard___collection___range___Range___has(val_t p0, val_t p1);
typedef val_t (*standard___collection___range___Range___has_t)(val_t p0, val_t p1);
val_t standard___collection___range___Range___has_only(val_t p0, val_t p1);
typedef val_t (*standard___collection___range___Range___has_only_t)(val_t p0, val_t p1);
val_t standard___collection___range___Range___count(val_t p0, val_t p1);
typedef val_t (*standard___collection___range___Range___count_t)(val_t p0, val_t p1);
val_t standard___collection___range___Range___iterator(val_t p0);
typedef val_t (*standard___collection___range___Range___iterator_t)(val_t p0);
typedef void (*CLOS_standard___collection___range___Range___iterate_0)(struct stack_frame_t *, val_t);
void standard___collection___range___Range___iterate(val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
typedef void (*standard___collection___range___Range___iterate_t)(val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
val_t standard___collection___range___Range___length(val_t p0);
typedef val_t (*standard___collection___range___Range___length_t)(val_t p0);
val_t standard___collection___range___Range___is_empty(val_t p0);
typedef val_t (*standard___collection___range___Range___is_empty_t)(val_t p0);
void standard___collection___range___Range___init(val_t p0, val_t p1, val_t p2, int* init_table);
typedef void (*standard___collection___range___Range___init_t)(val_t p0, val_t p1, val_t p2, int* init_table);
val_t NEW_Range_standard___collection___range___Range___init(val_t p0, val_t p1);
void standard___collection___range___Range___without_last(val_t p0, val_t p1, val_t p2, int* init_table);
typedef void (*standard___collection___range___Range___without_last_t)(val_t p0, val_t p1, val_t p2, int* init_table);
val_t NEW_Range_standard___collection___range___Range___without_last(val_t p0, val_t p1);
val_t standard___collection___range___IteratorRange___item(val_t p0);
typedef val_t (*standard___collection___range___IteratorRange___item_t)(val_t p0);
val_t standard___collection___range___IteratorRange___is_ok(val_t p0);
typedef val_t (*standard___collection___range___IteratorRange___is_ok_t)(val_t p0);
void standard___collection___range___IteratorRange___next(val_t p0);
typedef void (*standard___collection___range___IteratorRange___next_t)(val_t p0);
void standard___collection___range___IteratorRange___init(val_t p0, val_t p1, int* init_table);
typedef void (*standard___collection___range___IteratorRange___init_t)(val_t p0, val_t p1, int* init_table);
val_t NEW_IteratorRange_standard___collection___range___IteratorRange___init(val_t p0);
#endif
