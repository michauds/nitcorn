/* This C header file is generated by NIT to compile modules and programs that requires /home/jp/Projects-ssd/nit//lib/standard/math. */
#ifndef standard___math_sep
#define standard___math_sep
#include "standard___collection._sep.h"
#include <nit_common.h>
#include "math._nitni.h"
extern const char LOCATE_standard___math[];
extern const int SFT_standard___math[];
#define CALL_standard___math___Int___rand(recv) ((standard___math___Int___rand_t)CALL((recv), (SFT_standard___math[0] + 0)))
#define CALL_standard___math___Float___sqrt(recv) ((standard___math___Float___sqrt_t)CALL((recv), (SFT_standard___math[1] + 0)))
#define CALL_standard___math___Float___cos(recv) ((standard___math___Float___cos_t)CALL((recv), (SFT_standard___math[1] + 1)))
#define CALL_standard___math___Float___sin(recv) ((standard___math___Float___sin_t)CALL((recv), (SFT_standard___math[1] + 2)))
#define CALL_standard___math___Float___tan(recv) ((standard___math___Float___tan_t)CALL((recv), (SFT_standard___math[1] + 3)))
#define CALL_standard___math___Float___acos(recv) ((standard___math___Float___acos_t)CALL((recv), (SFT_standard___math[1] + 4)))
#define CALL_standard___math___Float___asin(recv) ((standard___math___Float___asin_t)CALL((recv), (SFT_standard___math[1] + 5)))
#define CALL_standard___math___Float___atan(recv) ((standard___math___Float___atan_t)CALL((recv), (SFT_standard___math[1] + 6)))
#define CALL_standard___math___Float___pow(recv) ((standard___math___Float___pow_t)CALL((recv), (SFT_standard___math[1] + 7)))
#define CALL_standard___math___Float___log(recv) ((standard___math___Float___log_t)CALL((recv), (SFT_standard___math[1] + 8)))
#define CALL_standard___math___Float___exp(recv) ((standard___math___Float___exp_t)CALL((recv), (SFT_standard___math[1] + 9)))
#define CALL_standard___math___Float___rand(recv) ((standard___math___Float___rand_t)CALL((recv), (SFT_standard___math[1] + 10)))
#define CALL_standard___math___Float___hypot_with(recv) ((standard___math___Float___hypot_with_t)CALL((recv), (SFT_standard___math[1] + 11)))
#define CALL_standard___math___Collection___rand(recv) ((standard___math___Collection___rand_t)CALL((recv), (SFT_standard___math[2] + 0)))
#define CALL_standard___math___Object___atan2(recv) ((standard___math___Object___atan2_t)CALL((recv), (SFT_standard___math[3] + 0)))
#define CALL_standard___math___Object___pi(recv) ((standard___math___Object___pi_t)CALL((recv), (SFT_standard___math[3] + 1)))
#define CALL_standard___math___Object___srand_from(recv) ((standard___math___Object___srand_from_t)CALL((recv), (SFT_standard___math[3] + 2)))
#define CALL_standard___math___Object___srand(recv) ((standard___math___Object___srand_t)CALL((recv), (SFT_standard___math[3] + 3)))
val_t standard___math___Int___rand(val_t p0);
typedef val_t (*standard___math___Int___rand_t)(val_t p0);
val_t standard___math___Float___sqrt(val_t p0);
typedef val_t (*standard___math___Float___sqrt_t)(val_t p0);
val_t standard___math___Float___cos(val_t p0);
typedef val_t (*standard___math___Float___cos_t)(val_t p0);
val_t standard___math___Float___sin(val_t p0);
typedef val_t (*standard___math___Float___sin_t)(val_t p0);
val_t standard___math___Float___tan(val_t p0);
typedef val_t (*standard___math___Float___tan_t)(val_t p0);
val_t standard___math___Float___acos(val_t p0);
typedef val_t (*standard___math___Float___acos_t)(val_t p0);
val_t standard___math___Float___asin(val_t p0);
typedef val_t (*standard___math___Float___asin_t)(val_t p0);
val_t standard___math___Float___atan(val_t p0);
typedef val_t (*standard___math___Float___atan_t)(val_t p0);
val_t standard___math___Float___pow(val_t p0, val_t p1);
typedef val_t (*standard___math___Float___pow_t)(val_t p0, val_t p1);
val_t standard___math___Float___log(val_t p0);
typedef val_t (*standard___math___Float___log_t)(val_t p0);
val_t standard___math___Float___exp(val_t p0);
typedef val_t (*standard___math___Float___exp_t)(val_t p0);
val_t standard___math___Float___rand(val_t p0);
typedef val_t (*standard___math___Float___rand_t)(val_t p0);
val_t standard___math___Float___hypot_with(val_t p0, val_t p1);
typedef val_t (*standard___math___Float___hypot_with_t)(val_t p0, val_t p1);
val_t standard___math___Collection___rand(val_t p0);
typedef val_t (*standard___math___Collection___rand_t)(val_t p0);
  void OC_standard___math___Collection___rand_2(struct stack_frame_t *closctx, val_t p0);
  typedef void (*OC_standard___math___Collection___rand_2_t)(struct stack_frame_t *closctx, val_t p0);
val_t standard___math___Object___atan2(val_t p0, val_t p1, val_t p2);
typedef val_t (*standard___math___Object___atan2_t)(val_t p0, val_t p1, val_t p2);
val_t standard___math___Object___pi(val_t p0);
typedef val_t (*standard___math___Object___pi_t)(val_t p0);
void standard___math___Object___srand_from(val_t p0, val_t p1);
typedef void (*standard___math___Object___srand_from_t)(val_t p0, val_t p1);
void standard___math___Object___srand(val_t p0);
typedef void (*standard___math___Object___srand_t)(val_t p0);
#endif
